'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _ = require('lodash');
var fs = require('fs-extra');
var path = require('path');

var BuildPack = require('./build_pack');

var SETUP = `
1.  Read [Prerequisites][prereq] and [How to run a sample][run] first.
1.  Install dependencies:

    With **npm**:

        npm install

    With **yarn**:

        yarn install

[prereq]: ../README.md#prerequisites
[run]: ../README.md#how-to-run-a-sample`;

var TESTS = `
1.  Set the **GCLOUD_PROJECT** and **GOOGLE_APPLICATION_CREDENTIALS** environment variables.

1.  Run the tests:

    With **npm**:

        npm test

    With **yarn**:

        yarn test`;

var nodejsConfig = {
  display: 'Node.js',
  lint: {
    cmd: 'semistandard',
    args: []
  },
  test: {
    app: {
      cmd: 'node',
      args: ['app.js']
    },
    build: {},
    deploy: {},
    install: {
      cmd: 'npm',
      args: ['install']
    },
    run: {
      cmd: 'npm',
      args: ['test']
    }
  },
  generate: {
    eslintignore: {
      description: 'Generate .eslintignore',
      filename: '.eslintignore'
    },
    eslintrc: {
      description: 'Generate main ESLint configuration.',
      filename: '.eslintrc.yml'
    },
    eslintrc_test: {
      description: 'Generate ESLint configuration for unit tests.',
      filename: 'test/.eslintrc.yml'
    },
    eslintrc_samples: {
      description: 'Generate ESLint configuration for samples.',
      filename: 'samples/.eslintrc.yml'
    },
    eslintrc_samples_test: {
      description: 'Generate ESLint configuration for samples tests.',
      filename: 'samples/system-test/.eslintrc.yml'
    },
    eslintrc_systemtest: {
      description: 'Generate ESLint configuration for system tests.',
      filename: 'system-test/.eslintrc.yml'
    },
    gitignore: {
      description: '.gitignore',
      filename: '.gitignore'
    },
    jsdoc: {
      description: 'Generate JSDoc configuration.',
      filename: '.jsdoc.js'
    },
    lib_readme: {
      lib_install_cmd: 'npm install --save {{name}}',
      quickstart_filename: 'samples/quickstart.js',
      getLibPkgName(buildPack) {
        return require(path.join(buildPack._cwd, 'package.json')).name;
      }
    },
    nycrc: {
      description: 'Generate nyc configuration.',
      filename: '.nycrc'
    },
    prettierignore: {
      description: 'Generate .prettierignore',
      filename: '.prettierignore'
    },
    prettierrc: {
      description: 'Generate .prettierrc',
      filename: '.prettierrc'
    },
    samples_readme: {
      setup: SETUP,
      tests: TESTS
    }
  }
};

/**
 * @class NodejsBuildPack
 * @returns {NodejsBuildPack} A new {@link NodejsBuildPack} instance.
 */
module.exports = function (_BuildPack) {
  _inherits(NodejsBuildPack, _BuildPack);

  function NodejsBuildPack() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var innerOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, NodejsBuildPack);

    return _possibleConstructorReturn(this, (NodejsBuildPack.__proto__ || Object.getPrototypeOf(NodejsBuildPack)).call(this, _.merge(nodejsConfig, _.cloneDeep(config)), innerOpts));
  }

  _createClass(NodejsBuildPack, [{
    key: 'expandConfig',
    value: function expandConfig(opts) {
      _get(NodejsBuildPack.prototype.__proto__ || Object.getPrototypeOf(NodejsBuildPack.prototype), 'expandConfig', this).call(this, opts);
      try {
        var pkg = require(path.join(opts.localPath, 'package.json'));
        opts.repository || (opts.repository = pkg.repository);
      } catch (err) {
        // Ignore error
      }
    }
  }, {
    key: 'getLibInstallCmd',
    value: function getLibInstallCmd(opts) {
      return `npm install --save ${opts.libPkgName}`;
    }
  }], [{
    key: 'detect',
    value: function detect(cwd) {
      return fs.statSync(path.join(cwd, 'package.json')).isFile();
    }
  }]);

  return NodejsBuildPack;
}(BuildPack);